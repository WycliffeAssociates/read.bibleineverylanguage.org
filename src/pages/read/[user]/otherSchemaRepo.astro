---
import Layout from "@layouts/Layout.astro"
import { ReaderWrapper } from "@components"
import { getChapterHtml, getRepoIndex, isValidRepo } from "@lib/api"
import {
  getBookAndChapterFromUrl,
  getPreferredLangFromHeader,
  seedAndMutateInitialDataRepoIndex
} from "@lib/utils"
const res404 = new Response(null, {
  status: 404
})
let { user } = Astro.params
let otherschemarepo = String(Astro.params.otherSchemaRepo)
let othersSchemaParts = otherschemarepo.split("/")
let repo = othersSchemaParts[0]

// url routes validation check
if (!repo || !user) return res404

repo = String(repo)
user = String(user)
// // is current wacs repo check
const isValid = isValidRepo({ user, repo })
if (!isValid) return res404

// // get of text and metadata
const repoIndex = await getRepoIndex({ user, repo })
if (!repoIndex) return res404

// // const isTW =
// // if (repoIndex.resourceType === "tw") return Astro.redirect(`/read/${user}/tw`)

// // grab query params (if present) for initial HTML
// const { book, chapter } = getBookAndChapterFromUrl({
//   book: Astro.url.searchParams.get("book"),
//   chapter: Astro.url.searchParams.get("chapter"),
//   repoIndex
// })
// //  intial props/data for page;
// const initialHtml = await getChapterHtml({ user, repo, book, chapter })
// if (!initialHtml) return Astro.redirect("/404")
// seedAndMutateInitialDataRepoIndex({
//   repoIndex,
//   book, //slug, not native label;
//   chapter,
//   initialHtml: initialHtml
// })
// const preferredLocale = getPreferredLangFromHeader(Astro.request)
// const initialDictModule = await import(
//   `../../../translations/${preferredLocale}.json`
// )
// const initialDict = {
//   [preferredLocale]: initialDictModule.default
// }
---

<Layout title={`title`} use100vh={true} textDir={"ltr"}>
  {JSON.stringify(repoIndex, null, 2)}
  <!-- <div
    class={`font-sans h-full bg-neutral-50 resourceType-${repoIndex.resourceType}`}
  >
    {
      repoIndex.resourceType !== "tw" ? (
        <ReaderWrapper
          client:load
          firstBookKey={book}
          firstChapterToShow={chapter}
          repoData={repoIndex}
          user={user}
          repositoryName={repo}
          preferredLocale={preferredLocale}
          initialDict={initialDict}
        />
      ) : (
        <div>Other thing</div>
      )
    }
  </div> -->
</Layout>

<script>
  window.addEventListener("popstate", (event) => {
    console.log(event)
  })
</script>
