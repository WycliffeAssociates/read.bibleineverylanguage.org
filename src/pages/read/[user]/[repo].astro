---
import { FUNCTIONS_ROUTES } from "@lib/routes"

import Layout from "@layouts/Layout.astro"
import { ReaderWrapper } from "@components"
import { getChapterHtml, getRepoIndex, isValidRepo } from "@lib/api"
import {
  getBookAndChapterFromUrl,
  getPreferredLangFromHeader,
  seedAndMutateInitialDataRepoIndex
} from "@lib/utils"
let { repo, user } = Astro.params

// url routes validation check
if (!repo || !user) return Astro.redirect("/404")

repo = String(repo)
user = String(user)
// is current wacs repo check
const isValid = isValidRepo({ user, repo })
if (!isValid) return Astro.redirect("/404")

// get of text and metadata
const repoIndex = await getRepoIndex({ user, repo })
if (!repoIndex) return Astro.redirect("/404")

// grab query params (if present) for initial HTML
const { book, chapter } = getBookAndChapterFromUrl({
  book: Astro.url.searchParams.get("book"),
  chapter: Astro.url.searchParams.get("chapter"),
  repoIndex
})
//  intial props/data for page;
const initialHtml = await getChapterHtml({ user, repo, book, chapter })
if (!initialHtml) return Astro.redirect("/404")
seedAndMutateInitialDataRepoIndex({
  repoIndex,
  book, //slug, not native label;
  chapter,
  initialHtml: initialHtml
})
const preferredLocale = getPreferredLangFromHeader(Astro.request)
const initialDictModule = await import(
  `../../../translations/${preferredLocale}.json`
)
const initialDict = {
  [preferredLocale]: initialDictModule.default
}
---

<Layout
  title={`${repo}-${book}-${chapter}`}
  use100vh={true}
  textDir={repoIndex.textDirection}
>
  <div
    class={`font-sans h-full bg-neutral-50 resourceType-${repoIndex.resourceType}`}
  >
    <ReaderWrapper
      client:load
      firstBookKey={book}
      firstChapterToShow={chapter}
      repoData={repoIndex}
      user={user}
      repositoryName={repo}
      preferredLocale={preferredLocale}
      initialDict={initialDict}
    />
  </div>
</Layout>

<script>
  window.addEventListener("popstate", (event) => {
    console.log(event)
  })
</script>
